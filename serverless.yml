service: server
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  stackName: calomentor
  apiName: calomentor-api
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
                - dynamodb:*
                - s3:*
                - ses:*
          Resource: '*'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters

functions:
  activate:
    handler: index.activateUser
    events:
      - http:
          path: user/activate/{id}
          method: patch
          cors:
            origin: '*'
            maxAge: 86400
  createUser:
    handler: index.createUser
    events:
      - http:
          path: user
          method: post
          cors:
            origin: '*'
            maxAge: 86400
  getUsers:
    handler: index.getUsers
    events:
      - http:
          path: user
          method: get
          cors:
            origin: '*'
            maxAge: 86400
  getUserById:
    handler: index.getUserById
    events:
      - http:
          path: user/{id}
          method: get
          cors:
            origin: '*'
            maxAge: 86400
  deleteUserById:
    handler: index.deleteUserById
    events:
      - http:
          path: user/{id}
          method: delete
          cors:
            origin: '*'
            maxAge: 86400
  updateUserById:
    handler: index.updateUserById
    events:
      - http:
          path: user/{id}
          method: put
          cors:
            origin: '*'
            maxAge: 86400
  mentorshipConfirmation:
    handler: index.mentorshipConfirmation

stepFunctions:
  stateMachines:
    mentorship:
      name: mentorship
      events: 
        - http:
            path: api/mentorship
            method: post
            response:
              headers:
                Content-Type: "'application/json'"
                X-Application-Id: "'calomentor'"
              template:
                application/json: |
                  {
                    "status": 200,
                    "info": "OK"
                  }
      definition:
        StartAt: SEND_CONFIRMATION_MAIL
        States:
          SEND_CONFIRMATION_MAIL:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
                FunctionName: { "Fn::Join": [ ":", ["arn:aws:lambda:sa-east-1", { "Ref": "AWS::AccountId" }, "function:${self:service}-${self:provider.stage}-mentorshipConfirmation"]]}
            End: true

resources:
  Resources:
    CalomentorUserDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: user
    CalomentorTimeSlotDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: time-slots
    CalomentorMentorshipDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: mentorship