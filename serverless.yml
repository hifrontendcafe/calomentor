service: server
frameworkVersion: "2"
useDotenv: true
provider:
  name: aws
  environment:
    CALOMENTOR_MAIL: ${file(./config.dev.json):CALOMENTOR_MAIL}
    CALOMENTOR_MAIL_CLIENT_ID: ${file(./config.dev.json):CALOMENTOR_MAIL_CLIENT_ID}
    CALOMENTOR_MAIL_CLIENT_SECRET: ${file(./config.dev.json):CALOMENTOR_MAIL_CLIENT_SECRET}
    CALOMENTOR_MAIL_REFRESH_TOKEN: ${file(./config.dev.json):CALOMENTOR_MAIL_REFRESH_TOKEN}
    CALOMENTOR_MAIL_ACCESS_TOKEN: ${file(./config.dev.json):CALOMENTOR_MAIL_ACCESS_TOKEN}
    BASE_URL: ${file(./config.dev.json):BASE_URL}
    BASE_FRONT_URL: ${file(./config.dev.json):BASE_FRONT_URL}
    JWT_KEY: ${file(./config.dev.json):JWT_KEY}
    API_KEY: ${file(./config.dev.json):API_KEY}
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  stackName: calomentor
  apiName: calomentor-api
  apiGateway:
    apiKeys:
      - ${file(./config.dev.json):API_KEY_PHRASE}
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters

functions:
  activate:
    handler: index.activateUser
    events:
      - http:
          path: user/activate/{id}
          method: patch
          cors: true
          private: true
  createUser:
    handler: index.createUser
    events:
      - http:
          path: user
          method: post
          cors: true
          private: true
  getUsers:
    handler: index.getUsers
    events:
      - http:
          path: user
          method: get
          cors: true
          private: true
  getUserById:
    handler: index.getUserById
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          private: true
  deleteUserById:
    handler: index.deleteUserById
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          private: true
  updateUserById:
    handler: index.updateUserById
    events:
      - http:
          path: user/{id}
          method: put
          cors: true
          private: true
  addTimeSlot:
    handler: index.addTimeSlot
    events:
      - http:
          path: time-slot
          method: post
          cors: true
          private: true
  getTimeSlotsByUserId:
    handler: index.getTimeSlotsByUser
    events:
      - http:
          path: time-slot/user/{id}
          method: get
          cors: true
          private: true
  getTimeSlotsById:
    handler: index.getTimeSlotById
    events:
      - http:
          path: time-slot/{id}
          method: get
          cors: true
          private: true
  updateTimeSlotState:
    handler: index.updateTimeSlotState
    events:
      - http:
          path: time-slot/{id}
          method: patch
          cors: true
          private: true
  updateMenteeOnSlot:
    handler: index.addMenteeToTimeSlot
    events:
      - http:
          path: time-slot/{id}/mentee
          method: patch
          cors: true
          private: true
  deleteTimeSlot:
    handler: index.deleteTimeSlot
    events:
      - http:
          path: time-slot/{id}
          method: delete
          cors: true
          private: true
  addWarningMentorship:
    handler: index.addWarningMentorship
    events:
      - http:
          path: warning
          method: post
          cors: true
          private: true
  getWarningsMentorship:
    handler: index.getWarningsMentorship
    events:
      - http:
          path: warning
          method: get
          cors: true
          private: true
  getWarningsMentorshipByMentee:
    handler: index.getWarningsMentorshipByMentee
    events:
      - http:
          path: warning/{id}
          method: get
          cors: true
          private: true
  forgiveWarningMentorship:
    handler: index.forgiveWarningMentorship
    events:
      - http:
          path: warning/{id}
          method: patch
          cors: true
          private: true
  mentorshipCreateAPI:
    handler: index.mentorshipCreate
    events:
      - http:
          path: mentorship/create
          method: post
          cors: true
          private: true
  mentorshipCancelAPI:
    handler: index.mentorshipCancel
    events:
      - http:
          path: mentorship/cancel
          method: post
          cors: true
          private: true
  getAllMentorships:
    handler: index.getAllMentorships
    events:
      - http:
          path: mentorship/{id}
          method: get
          cors: true
          private: true
  mentorshipConfirmation:
    handler: index.mentorshipConfirmation
    events:
      - http:
          path: mentorship/confirmation
          method: patch
          cors: true
          private: true
  mentorshipFeedback:
    handler: index.mentorshipFeedbackForm
    events:
      - http:
          path: mentorship/feedback
          method: patch
          cors: true
          private: true
  mentorshipCreate:
    handler: index.mentorshipCreate
  mentorshipCancel:
    handler: index.mentorshipCancel
  checkCancel:
    handler: index.checkCancel
  mentorshipReminder:
    handler: index.mentorshipReminder
  mentorshipFeedbackSend:
    handler: index.mentorshipFeedbackSend

stepFunctions:
  stateMachines:
    createMentorship:
      role: arn:aws:iam::822886109108:role/service-role/StepFunctions-mentorship-role-88e1969f
      name: createMentorship
      events:
        - http:
            path: sf/mentorship
            method: post
            cors:
              origin: "*"
              headers:
                - Content-Type
                - X-Api-Key
              allowCredentials: true
            private: true
            response:
              headers:
                Content-Type: "'application/json'"
                Access-Control-Allow-Origin: "'*'"
              template:
                application/json: |
                  {
                    "status": 200,
                    "info": "OK"
                  }
      definition:
        StartAt: MENTORSHIP_INITIAL
        States:
          MENTORSHIP_INITIAL:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-mentorshipCreate",
                    ],
                  ],
              }
            Next: MENTORSHIP_REMINDER_WAIT
          MENTORSHIP_REMINDER_WAIT:
            Type: Wait
            TimestampPath: "$.responseData.dateToRemind"
            Next: CHECK_CANCEL_TASK
          CHECK_CANCEL_TASK:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-checkCancel",
                    ],
                  ],
              }
            Next: CHECK_CANCEL_CHOICE
          CHECK_CANCEL_CHOICE:
            Type: Choice
            Choices:
              - Variable: "$.is_cancel"
                BooleanEquals: true
                Next: END_BY_CANCEL
              - Variable: "$.is_cancel"
                BooleanEquals: false
                Next: MENTORSHIP_REMINDER
            Default: MENTORSHIP_REMINDER
          END_BY_CANCEL:
            Type: Fail
            Cause: "Mentorship cancelled"
          MENTORSHIP_REMINDER:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-mentorshipReminder",
                    ],
                  ],
              }
            Next: MENTORSHIP_FEEDBACK_WAIT
          MENTORSHIP_FEEDBACK_WAIT:
            Type: Wait
            TimestampPath: "$.responseData.mentorshipDate"
            Next: SEND_FEEDBACK
          SEND_FEEDBACK:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-mentorshipFeedbackSend",
                    ],
                  ],
              }
            End: true

resources:
  Resources:
    CalomentorUserDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: user
    CalomentorTimeSlotDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: time-slots
    CalomentorMentorshipDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: mentorship
    CalomentorWarningsDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: warnings
custom:
  serverless-offline:
    httpPort: 3001
