service: server
frameworkVersion: "2"
useDotenv: true
provider:
  name: aws
  environment:
    CALOMENTOR_MAIL: ${file(./config.dev.json):CALOMENTOR_MAIL}
    CALOMENTOR_MAIL_CLIENT_ID: ${file(./config.dev.json):CALOMENTOR_MAIL_CLIENT_ID}
    CALOMENTOR_MAIL_CLIENT_SECRET: ${file(./config.dev.json):CALOMENTOR_MAIL_CLIENT_SECRET}
    CALOMENTOR_MAIL_REFRESH_TOKEN: ${file(./config.dev.json):CALOMENTOR_MAIL_REFRESH_TOKEN}
    CALOMENTOR_MAIL_ACCESS_TOKEN: ${file(./config.dev.json):CALOMENTOR_MAIL_ACCESS_TOKEN}
    BASE_URL: ${file(./config.dev.json):BASE_URL}
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  stackName: calomentor
  apiName: calomentor-api
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters

functions:
  activate:
    handler: index.activateUser
    events:
      - http:
          path: user/activate/{id}
          method: patch
          cors: true
  createUser:
    handler: index.createUser
    events:
      - http:
          path: user
          method: post
          cors: true
  getUsers:
    handler: index.getUsers
    events:
      - http:
          path: user
          method: get
          cors: true
  getUserById:
    handler: index.getUserById
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
  deleteUserById:
    handler: index.deleteUserById
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
  updateUserById:
    handler: index.updateUserById
    events:
      - http:
          path: user/{id}
          method: put
          cors: true
  addTimeSlot:
    handler: index.addTimeSlot
    events:
      - http:
          path: time-slot
          method: post
          cors: true
  getTimeSlotsByUserId:
    handler: index.getTimeSlotsByUser
    events:
      - http:
          path: time-slot/user/{id}
          method: get
          cors: true
  getTimeSlotsById:
    handler: index.getTimeSlot
    events:
      - http:
          path: time-slot/{id}
          method: get
          cors: true
  updateTimeSlot:
    handler: index.updateSlot
    events:
      - http:
          path: time-slot
          method: patch
          cors: true
  deleteTimeSlot:
    handler: index.deleteSlot
    events:
      - http:
          path: time-slot/{id}
          method: delete
          cors: true
  mentorshipCreate:
    handler: index.mentorshipCreate
  mentorshipReminder:
    handler: index.mentorshipReminder

stepFunctions:
  stateMachines:
    createMentorship:
      role: arn:aws:iam::822886109108:role/service-role/StepFunctions-mentorship-role-88e1969f
      name: createMentorship
      events:
        - http:
            path: sf/mentorship
            method: post
            response:
              headers:
                Content-Type: "'application/json'"
                X-Application-Id: "'calomentor'"
              template:
                application/json: |
                  {
                    "status": 200,
                    "info": "OK"
                  }
      definition:
        StartAt: MENTORSHIP_INITIAL
        States:
          MENTORSHIP_INITIAL:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-mentorshipCreate",
                    ],
                  ],
              }
            Next: MENTORSHIP_REMINDER_WAIT
          MENTORSHIP_REMINDER_WAIT:
            Type: Wait
            TimestampPath: "$.responseData.dateToRemind"
            Next: MENTORSHIP_REMINDER
          MENTORSHIP_REMINDER:
            Type: Task
            Resource:
              {
                "Fn::Join":
                  [
                    ":",
                    [
                      "arn:aws:lambda:sa-east-1",
                      { "Ref": "AWS::AccountId" },
                      "function:${self:service}-${self:provider.stage}-mentorshipReminder",
                    ],
                  ],
              }
            End: true

resources:
  Resources:
    CalomentorUserDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: user
    CalomentorTimeSlotDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: time-slots
    CalomentorMentorshipDynamoDB:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: mentorship
